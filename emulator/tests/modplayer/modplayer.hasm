; module structure
.const mp_chn_0        0x00
.const mp_file         0x04
.const mp_curr_pat     0x08
.const mp_pats_ptr     0x0c
.const mp_sng_len      0x10
.const mp_restart_at   0x14
.const mp_seq_ptr      0x18
.const mp_num_pats     0x1c
.const mp_num_chn      0x20
.const mp_max_samples  0x24

; playing vars
.const mp_pat_pos      0x28
.const mp_delay        0x2c
.const mp_spd          0x30
.const mp_playing_pat  0x34
.const mp_curr_pos_ptr 0x38

.const mp_track_size   0x3c
.const mp_jump_next    0x40

; playing note
;.const mp_curr_pat    0x38
;.const mp_pat_ptr     0x3c
;.const mp_chn_0       0x40
;.const mp_file        0x44
;.const mp_curr_pat    0x48
;.const mp_pat_ptr     0x4c

.const mp_samples_idx1 0x0D0 ; // 1-indexed pointer to samples
.const mp_samples      0x100

; sample structure
.const mps_sizeof     0x30

.const mps_smpptr     0x00
.const mps_len        0x04
.const mps_finetune   0x08
.const mps_vol        0x0C
.const mps_loopstart  0x10
.const mps_replen     0x14

.const mp_channels    0x800

;channel structure
.const mpc_sizeof         0x20

.const mpc_ins            0x00
.const mpc_effect         0x04
.const mpc_effect_param   0x08
.const mpc_order          0x0C
.const mpc_hw_chn         0x10
.const mpc_last_param     0x14
.const mpc_last_order     0x18

; constants
.const mp_magic_pal 7093789 ; "magic number" for PAL timing, period/freqency divisor

; effect jump table
mp_effect_jmp: .dd mp_fx_0 mp_fx_1 mp_fx_2 mp_fx_3 mp_fx_4 mp_fx_5 mp_fx_6 mp_fx_7 mp_fx_8 mp_fx_9 mp_fx_a mp_fx_b mp_fx_c mp_fx_d mp_fx_e mp_fx_f

mp_dmsg: .db "dec: %d", 10, 0
mp_xmsg: .db "hex: 0x%x", 10, 0
mp_newline: .db 10, 0

.macro PrintHex(what)
	set push, what
	set push, mp_xmsg
	sys SYS_PRINT
.end

.macro Print0(str)
	Push(str)
	sys SYS_PRINT
.end

.macro Print1(str, a1)
	Push(a1)
	Push(str)
	sys SYS_PRINT
.end

; parse a sapmle
;   a -> pointer to sample structure to write to
;   j -> file pointer 

mp_sname_msg:   .db "sample name: %s", 10, 0
mp_ftune_tab:   .db 0, +1, +2, +3, +4, +5, +6, +7, -8, -7, -6, -5, -4, -3, -2, -1
mps_parsed_msg: 
	.db "  mps_len:       %04x", 10, 
	.db "  mps_finetune:  %d", 10
	.db "  mps_vol:       %02x", 10
	.db "  mps_loopstart: %04x", 10
	.db "  mps_replen:    %04x", 10, 10, 0

; calculates a pointer to the current pattern position
;   obj -> mod player object pointer
;   w1, w2, w3 -> working registers

.macro modplayer_calc_patpos_ptr(obj, w1, w2, w3)
	; Skip to current note. 
	; Calculate pattern offset and put in w1

	; get current pattern number from sequence and put in w2
	set.l w2, [mp_seq_ptr+obj]  ; pointer to sequence
	add w2, [mp_curr_pat+obj]   ; index into sequence
	set.b w2, [w2]             ; read pattern number from sequence

	set.l [mp_playing_pat+obj], w2

	; Whole patterns size
	set.l w1, 64              ; 64 tracks per pattern
	
	; ..times current pattern
	mul w1, w2

	; ...plus the current pos in the pattern
	add w1, [mp_pat_pos+obj]

	; ... times track size
	mul w1, [mp_track_size+obj]

	; Offset into pattern pointer to get to current note data
	set.l w3, [mp_pats_ptr+obj]
	add w3, w1

	set.l [mp_curr_pos_ptr+obj], w3
.end

.macro mp_next_ptn(mp, pos, w0, w1, w2)
	; reset pos to 0
	set.l [mp_pat_pos+mp], pos

	set.l w0, [mp_num_pats+mp]
	sub w0, 1

	; if we're at the last pattern, loop to loop point
	ife w0, [mp_curr_pat+mp]
		set.l pc, uniq#loop_song

	add [mp_curr_pat+mp], 1

	modplayer_calc_patpos_ptr(mp, w0, w1, w2)

	set.l pc, uniq#return

	uniq#loop_song:
		set.l [mp_curr_pat+mp], [mp_restart_at+mp]
		modplayer_calc_patpos_ptr(mp, w0, w1, w2)

	uniq#return:
.end


modplayer_parse_sample:
	set.l push x

	set.l push, j
	set.l push, mp_sname_msg
	sys SYS_PRINT

	; skip 22 char sample name
	add j, 22

	; 2 bytes sample length (/2)
	set.l x, mps_len
	add x, a

	set.b [1+x], [j]
	set.b [x], [1+j]

	mul [mps_len+a], 2 ; length is divided by 2 in file
	add j, 2

	; 1 byte fine tune
	set.b x, [j]
	set.b [mps_finetune+a], [mp_ftune_tab+x]
	add j, 1

	; 1 byte sample volume
	set.b x, [j]
	mul b, 4 ; 0-64 -> 0-255
	ifg  b, 255
		set.l b, 255

	set.b [mps_vol+a], b
	add j, 1

	; 2 byte loop start
	set.w [mps_loopstart+a], [j]

	set.l x, mps_loopstart
	add x, a

	set.b [1+x], [j]
	set.b [x], [1+j]

	mul [mps_loopstart+a], 2 
	add j, 2
	
	; 2 byte loop length
	set.w [mps_replen+a], [j]

	set.l x, mps_replen
	add x, a

	set.b [1+x], [j]
	set.b [x], [1+j]

	mul [mps_replen+a], 2 
	add j, 2

	; print result
	set.l push, [mps_replen+a]
	set.l push, [mps_loopstart+a]
	set.l push, [mps_vol+a]
	set.l push, [mps_finetune+a]
	set.l push, [mps_len+a]

	set.l push, mps_parsed_msg
	sys SYS_PRINT

	set.l x, pop

	set.l pc, pop

; init the player
;   a -> mod player object pointer
;   b -> mod file pointer
;   c -> base channel to use

mpi_msg:        .db "song name: %s", 10, 0
mpi_parsed_msg: .db "song length: %d, restart: %d, num pats: %d", 10, 0
mpi_vstr:       .db "string: %c%c%c%c", 10, 0

modplayer_init:
	set.l [mp_file+a], b
	set.l [mp_chn_0+a], c

	; print song name
	set.l push, [mp_file+a]
	set.l push, mpi_msg

	sys SYS_PRINT

	; store "file pointer" in j
	set.l j, [mp_file+a]

	; skip 20 char song name
	add j, 20

	; save object pointer in x
	set.l x, a
	
	; put sample pointer in a
	set.l a, mp_samples
	add a, x
	
	; Set the max number of instruments
	; TODO check if it's a 31 instrument mod or not
	set.l [mp_max_samples+x], 31
	
	; loop through and parse the sample headers
	set.l i, 0

	parse_sample_loop:
		jsr modplayer_parse_sample
		
		add a, mps_sizeof
		
		add i, 1
		ifn i, [mp_max_samples+x]
			set.l pc, parse_sample_loop

	; 1 byte song length
	set.b [mp_sng_len+x], [j]
	add j, 1

	; 1 byte song repeat
	set.b [mp_restart_at+x], [j]
	add j, 1

	; 128 byte song sequences
	set.l [mp_seq_ptr+x], j

	; number of patterns is the highest pattern stored + 1
	set.l i, 0
	calc_num_pats_loop:
		set.b y, [j]

		ifg y, [mp_num_pats+x]
			set.l [mp_num_pats+x], y
	
		add j, 1
		add i, 1
		ifn i, 128
			set.l pc, calc_num_pats_loop

	add [mp_num_pats+x], 1	
	
	set.l push, [mp_num_pats+x]
	set.l push, [mp_restart_at+x]
	set.l push, [mp_sng_len+x]
	set.l push, mpi_parsed_msg
	sys SYS_PRINT

	; "M.K." etc.
	set.l push, [3+j]
	set.l push, [2+j]
	set.l push, [1+j]
	set.l push, [j]
	set.l push, mpi_vstr
	sys SYS_PRINT

	add j, 4

	; Save a pointer to the patterns
	set.l [mp_pats_ptr+x], j

	; Set number of channels to 4 for now
	set.l [mp_num_chn+x], 4

	; Skip the patterns
	set.l y, 4             ; 4 bytes per note
	mul y, [mp_num_chn+x]  ; channels * notesize bytes per track
	mul y, 64              ; 64 tracks per pattern
	mul y, [mp_num_pats+x] ; skip mp_num_pats patterns

	add j, y

	; Get the sample pointers
	set.l i, 0

	; A pointer to the samples structure parsed earlier
	set.l y, mp_samples
	add y, x

	parse_sample_ptr_loop:
		ife [mps_len+y], 0
			set.l pc, parse_sample_skip

		set.l [mps_smpptr+y], j
		add j, [mps_len+y]

		set.l push, [mps_smpptr+y]
		set.l push, mp_xmsg
		sys SYS_PRINT
		
		parse_sample_skip:
		add y, mps_sizeof

		add i, 1
		ifn i, [mp_max_samples+x]
			set.l pc, parse_sample_ptr_loop

	; set default playback speed to 6
	set.l [mp_spd+x], 6

	; set up the channel structure's mapping to hardware channels
	; A pointer to the first hardware channel to use in z
	set.l z, [mp_chn_0+x]

	; Loop through the channels
	set.l i, 0
	
	; A pointer to the channel structure
	set.l j, x
	add j, mp_channels
		
	mpi_channel_loop:
		set.l [mpc_hw_chn+j], z
		
		; step to the next channel data object
		add j, mpc_sizeof

		; step to the next hardware channel
		add z, APU_CHN_SIZE

		add i, 1
		ifn i, [mp_num_chn+x]
			set.l pc, mpi_channel_loop

	; calculate track/line size
	set.l [mp_track_size+x], 4
	mul [mp_track_size+x], [mp_num_chn+x]

	set.l a, x
	modplayer_calc_patpos_ptr(a, y, x, j)

	set [mp_jump_next+a], -1

	set.l pc, pop

mp_order_tab:
.dd 1712,1616,1525,1440,1357,1281,1209,1141,1077,1017, 961, 907
.dd 856, 808, 762, 720, 678, 640, 604, 570, 538, 508, 480, 453
.dd 428, 404, 381, 360, 339, 320, 302, 285, 269, 254, 240, 226
.dd 214, 202, 190, 180, 170, 160, 151, 143, 135, 127, 120, 113
.dd 107, 101,  95,  90,  85,  80,  76,  71,  67,  64,  60,  56 ; 57?
.dd 53, 50, 47, 45, 42, 40, 37, 35, 33, 31, 30, 28 
.dd 27, 25, 24, 22, 21, 20, 19, 18, 17, 16, 15, 14, 0


mp_note_tab:
.db "C-0", 0, "C#0", 0, "D-0", 0, "D#0", 0, "E-0", 0, "F-0", 0, "F#0", 0, "G-0", 0, "G#0", 0, "A-0", 0, "A#0", 0, "B-0", 0
.db "C-1", 0, "C#1", 0, "D-1", 0, "D#1", 0, "E-1", 0, "F-1", 0, "F#1", 0, "G-1", 0, "G#1", 0, "A-1", 0, "A#1", 0, "B-1", 0
.db "C-2", 0, "C#2", 0, "D-2", 0, "D#2", 0, "E-2", 0, "F-2", 0, "F#2", 0, "G-2", 0, "G#2", 0, "A-2", 0, "A#2", 0, "B-2", 0
.db "C-3", 0, "C#3", 0, "D-3", 0, "D#3", 0, "E-3", 0, "F-3", 0, "F#3", 0, "G-3", 0, "G#3", 0, "A-3", 0, "A#3", 0, "B-3", 0
.db "C-4", 0, "C#4", 0, "D-4", 0, "D#4", 0, "E-4", 0, "F-4", 0, "F#4", 0, "G-4", 0, "G#4", 0, "A-4", 0, "A#4", 0, "B-4", 0
.db "C-5", 0, "C#5", 0, "D-5", 0, "D#5", 0, "E-5", 0, "F-5", 0, "F#5", 0, "G-5", 0, "G#5", 0, "A-5", 0, "A#5", 0, "B-5", 0
.db "C-6", 0, "C#6", 0, "D-6", 0, "D#6", 0, "E-6", 0, "F-6", 0, "F#6", 0, "G-6", 0, "G#6", 0, "A-6", 0, "A#6", 0, "B-6", 0, "---", 0

mp_effect_tab:
.db "0123456789ABCDEFGHIJKLMNOPQRSTUVXYZ"

mpp_note_msg: .db "(% 4d) %s %02x %c%02x | ", 0

; print a note
;   a -> mod player object pointer
;   j -> current channel playing data struct pointer

modplayer_print_note:
	set.l b, 0

	mpp_loop:
		ifg [mpc_order+j], [mp_order_tab+b]
			set.l pc, mpp_break

		add b, 4
		ifn b, 336
			set.l pc, mpp_loop

	mpp_break:

	ifn b, 336
		sub b, 4

	add b, mp_note_tab

	set.l y, [mpc_effect+j]

	set.l push, [mpc_effect_param+j]
	set.l push, [mp_effect_tab+y] ; effect
	set.l push, [mpc_ins+j]
	set.l push, b
	set.l push, [mpc_order+j]
	
	set.l push, mpp_note_msg

	sys SYS_PRINT

	set.l pc, pop

; converts amiga order to freqency and sets it to a hardware channel
;   j -> channel
;   b -> hardware channel
;   modifies y, c

modplayer_apply_order:
	; set playback frequency
	;   7093789.2 / (period * 2)

	set.l c, [mpc_last_order+j]

	mul c, 2
	set.l y, mp_magic_pal
	div y, c

	set.l [APU_O_FREQ+b], y
	

; trigger a note
;   a -> mod player object pointer
;   i -> channel number
;   j -> current channel playing data struct pointer

modplayer_trigger_note:
	; if there's no note, return
	ife [mpc_order+j], 0
		set.l pc, pop

	; set z to to a pointer to the hardware channel
	set.l z, [mpc_hw_chn+j]

	; get a pointer to the sample/instrument structure
	set.l x, mps_sizeof    ; sizeof sample struct
	mul x, [mpc_ins+j]     ; ... times instrument number
	add x, mp_samples_idx1 ; ... plus offset of the samples into the mp structure (1 indexed, instruments begin at 1)
	add x, a               ; ... plus the object location -> x contains the sample location

	; set the sample pointer
	set.l [APU_O_SPTR+z], [mps_smpptr+x]

	; reset player position
	set.l [APU_O_POS+z], 0

	; enable looping if replen is bigger than 2 (1 in the file)
	ifg 2, [mps_replen+x]
		set.l pc, mptn_is_not_looped;

	mptn_is_looped:
		; set the loop start
		set.l [APU_O_LSTART+z], [mps_loopstart+x]

		; set the end pos
		set.l [APU_O_LEND+z], [mps_loopstart+x]
		add [APU_O_LEND+z], [mps_replen+x]

		; set the loop flag
		set.l [APU_O_FLAGS+z], APU_FLAG_LOOP

		set.l pc, mptn_continue

	mptn_is_not_looped:
		; disable the loop
		set.l [APU_O_FLAGS+z], 0
		
		; set the end pos to the sample length
		set.l [APU_O_LEND+z], [mps_len+x]

	mptn_continue:

	; set the volume
	set.b [APU_O_VOL+z], [mps_vol+x]

	; set pan
	and b, 1
	ife b, 1
		set.b [APU_O_PAN+z], 165
	ife b, 0
		set.b [APU_O_PAN+z], 89

	; set playback frequency
	;   7093789.2 / (period * 2)

	set.l c, [mpc_order+j]

	mul c, 2
	set.l b, mp_magic_pal
	div b, c

	set.l [APU_O_FREQ+z], b

	set.l pc, pop

; all effects
;   a -> mod player object
;   b -> hw channel
;   j -> channel pointer
;   i -> channel number
;   can modify y, c 

.macro mp_fx_preslide()
	; not on a new note (most accurate, at least compared to fast tracker)
	ife [mp_delay+a], 0
		set.l pc, pop

	set.l y, [mpc_effect_param+j]

	; use previous param setting if it's 0
	ife y, 0
		set.l y, [mpc_last_param+j]
.end

; arpreggio
mp_fx_0:
	set.l pc, pop

; slide up
mp_fx_1:
	mp_fx_preslide()
	sub [mpc_last_order+j], y
	jsr modplayer_apply_order
	set.l pc, pop

; slide down
mp_fx_2:
	mp_fx_preslide()
	add [mpc_last_order+j], y
	jsr modplayer_apply_order
	set.l pc, pop

; slide to note
mp_fx_3:
	set.l pc, pop

; vibrato
mp_fx_4:
	set.l pc, pop

; continue Slide to note, but also do volume slide
mp_fx_5:
	set.l pc, pop

; continue vibrato but also do volume slide
mp_fx_6:
	set.l pc, pop

; tremlo
mp_fx_7:
	set.l pc, pop

; set pan
mp_fx_8:
	set.l pc, pop

; set sample offset
mp_fx_9:
	set.l pc, pop

; volume slide
mp_fx_a:
	mp_fx_preslide()
	
	; if only lower nibble set, slide down, otherwise up
	ifg 0xf, y
		set.l pc, mp_fx_a_down

	; slide up

	and y, 0xf0

	shr y, 4
	mul y, 4

	set.b c, [APU_O_VOL+b]

	add c, y

	; make sure it's below 255
	ifg c, 255
		set.l c, 255

	set.l [APU_O_VOL+b], c

	set.l pc, pop
	mp_fx_a_down:

	mul y, 4
	set.b c, [APU_O_VOL+b]
	sub c, y
	
	; make sure volume is 0 or above (unsigned compare, overflow -> very big number)
	ifg c, 255
		set.l c, 0
	
	set.b [APU_O_VOL+b], c

	set.l pc, pop
	
	;set.l push, c
	;set.l push, mp_xmsg
	;sys SYS_PRINT


; position jump
mp_fx_b:
	set.l pc, pop

; set volume
mp_fx_c:
	; only on a new note
	ifn [mp_delay+a], 0
		set.l pc, pop

	set.l y, [mpc_effect_param+j]
	mul y, 4 ; 0-64 -> 0-255
	ifg y , 255
		set.l y, 255
	set.b [APU_O_VOL+b], y

	set.l pc, pop

; pattern break
mp_fx_d:
	; Hex encoded decimal parameter 
	; 0x40 should be interprted as 40

	set c, [mpc_effect_param+j] 
	and c, 0xf

	set y, [mpc_effect_param+j]
	shr y, 4
	and y, 0xf
	mul y, 10
	add y, c

	ifg y, 63
		set y, 63 

	; since this shouldn't happen until the next division
	; save the value in jump next and the main loop will take care of it
	set [mp_jump_next+a], y

	set.l pc, pop

; set filter
mp_fx_e:
	set.l pc, pop

; set speed
mp_fx_f:
	; only on a new note
	ifn [mp_delay+a], 0
		set.l pc, pop

	; don't handle bmp changes yet
	ifg [mpc_effect_param+j], 32
		set.l pc, pop

	; set speed
	set.l [mp_spd+a], [mpc_effect_param+j]

	set.l pc, pop

; update the player
;   a -> mod player object pointer

mpt_note_msg:    .db "note: %d %x %x %x", 10, 0
mpt_pattern_msg: .db "[%02x(%02x)/%02x %02x]", 10, 0

modplayer_tick:
	jsr push_all

	set.l x, [mp_curr_pos_ptr+a]
	
	; A pointer to the first channel's current playing data
	set.l j, a
	add j, mp_channels

	; Loop through the channels
	set.l i, 0

	; if mp_jump_next != -1 
	; a pattern break effect from last division wants to jump to next pattern
	ife [mp_jump_next+a], -1
		set pc, mp_channel_loop

	ife [mp_delay+a], 0
		set pc, mpt_next_ptn
		
	mp_channel_loop:
		; parse the note if delay is 0
		ifn [mp_delay+a], 0
			set.l pc, mp_apply_effects

		mp_parse_note:
			; 2 bytes instrument / period
			; highest 4 bits in LE 16b word, highest nibble in instrument number -> b
			set.b b, [x]
			and b, 0xf0

			; mask out so that only the 4 lowest bits remain, and shift them up to highest
			; of the 12 bit word that is the period
			set.b c, [x]
			and c, 0xf
			shl c, 8
			add x, 1

			; read lower 8 bits of word into y and or together with
			; the higher 4 bits in c
			; c now contains order/note
			set.b y, [x]
			bor c, y

			set.l [mpc_order+j], c

			; if there's a new note, replace the current playing one
			ifn c, 0
				set.l [mpc_last_order+j], c

			add x, 1

			; 1 bytes instrument / effect
			; highest 4 bits is lower nibble in instrument number
			; grab to y, shift down and or together with the higher 
			; instrument nibble -> b now contains instrument
			set.b y, [x]
			and y, 0xf0
			shr y, 4
			bor b, y

			set.l [mpc_ins+j], b
			
			; read lower nibble -> y now contains effect
			set.b y, [x]
			and y, 0xf 

			set.l [mpc_effect+j], y
			
			add x, 1

			; read effect parameter
			set.b b, [x]

			set.b [mpc_effect_param+j], b

			; used by slides, where they use the last param setting if
			; 0 is given. Set this only if param is not 0
			ifn b, 0
				set.b [mpc_last_param+j], b

			add x, 1

			set.l push, x

			; print the note
			jsr modplayer_print_note

			; trigger the note
			jsr modplayer_trigger_note

			set.l x, pop

		mp_apply_effects:
			set.l y, [mpc_effect+j] ; put effect number in y
			mul y, 4
			set.l b, [mpc_hw_chn+j] ; put hardware channel in b
			jsr [mp_effect_jmp+y]   ; call the effect function

		; step to the next channel data object
		add j, mpc_sizeof

		add i, 1
		ifn i, [mp_num_chn+a]
			set.l pc, mp_channel_loop

	mp_skip_play:

	; if the delay is not 0, just decrease the timer
	ifn [mp_delay+a], 0
		set.l pc, mpt_dec_timer

	; show pattern
	set.l push, [mp_pat_pos+a]
	set.l push, [mp_num_pats+a]
	set.l push, [mp_playing_pat+a]
	set.l push, [mp_curr_pat+a]
	set.l push, mpt_pattern_msg
	sys SYS_PRINT

	; reset note delay timer to speed
	set.l [mp_delay+a], [mp_spd+a]
	sub [mp_delay+a], 1

	; point current position pointer to next position
	add [mp_curr_pos_ptr+a], [mp_track_size+a]
	
	; if pos is 63, jump to next pattern
	ife [mp_pat_pos+a], 63
		set.l pc, mpt_next_ptn
	
	; step to next pos
	add [mp_pat_pos+a], 1

	set.l pc, mpt_return

	mpt_next_ptn:
	set b, [mp_jump_next+a]
	ife b, -1:
		set b, 0

	mp_next_ptn(a, b, y, x, j)

	set [mp_jump_next+a], -1

	Print0(mp_newline)
	
	mpt_dec_timer:
		ifn [mp_delay+a], 0
			sub [mp_delay+a], 1

	mpt_return:
		jsr pop_all
		set.l pc, pop
